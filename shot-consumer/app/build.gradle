buildscript {
  repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
    google()
  }
  dependencies {
    classpath "com.neenbedankt.gradle.plugins:android-apt:1.7"
    classpath "com.karumi:shot:5.14.1"
  }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "shot"

android {
    compileSdk 33
    defaultConfig {
        applicationId "com.karumi"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.karumi.TestRunner"
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude "META-INF/*"
    }

    testOptions {
        if (System.getenv("orchestrated") == "true") {
            execution "ANDROIDX_TEST_ORCHESTRATOR"
        }
    }
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.29.0"

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'

    implementation "com.github.salomonbrys.kodein:kodein:4.1.0"
    implementation "com.github.salomonbrys.kodein:kodein-core:4.1.0"
    implementation "com.github.salomonbrys.kodein:kodein-android:4.1.0"
    implementation "com.github.salomonbrys.kodein:kodein-conf:4.1.0"
    implementation "com.squareup.picasso:picasso:2.8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.6.1'
    debugImplementation "androidx.fragment:fragment-testing:1.6.0"

    testImplementation "junit:junit:4.13.2"
    androidTestUtil "androidx.test:orchestrator:1.4.2"

    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.5.1"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.5.1"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "asm:asm:3.3.1"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    androidTestImplementation "com.github.tmurakami:dexopener:2.0.5"
    androidTestImplementation "org.mockito:mockito-android:3.12.4"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    androidTestImplementation "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.0.0"
}

shot {
    useComposer = true
    showOnlyFailingTestsInReports = true
}

tasks.register("ktlint", JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

tasks.named("check") { dependsOn "ktLint" }

tasks.register("ktlintFormat", JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).configureEach {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
}
